@page "/"
@using TicTacToe.Data.Constants
@using TicTacToe.Domain.Core
@inject GameService Service

<PageTitle>Index</PageTitle>

@if (Game is null)
{
    <div>Loading...</div>
}
else
{
    <div class="container-fluid board">
        <button id="btn-new-game" class="btn-primary" onclick="@StartGame">
            New Game
        </button>
        <br/>
        <div class="mt-2 mb-2"> 
            <span id="clock" style="font-weight: bold; font-size: xx-large;">@_clock</span>
        </div>
        
        @if (Result == GameResult.PlayerWon)
        {
            <div class="alert alert-success">@Message</div>
            
        }
        else if (Result == GameResult.ComputerWon)
        {
            <div class="alert alert-danger">@Message</div>
        }
        else
        {
            <div class="alert alert-info">@Message</div>
        }

        <div class="grid-container">
            @foreach (var square in Game.Board.Squares)
            {
                <div id="@square.Id" class="grid-item" onclick="@(() => PlayerMove(square))">@square</div>
            }
        </div>
        <div class="container-fluid opponents">
            <div class="row">
                <div class="btn-group" role="group" aria-label="Opponent">
                    <button type="button" class="btn btn-@(Opponent == "Tipsy" ? "success" : "secondary")" onclick="@(() => SetOpponent("Tipsy"))">Tipsy</button>
                    <button type="button" class="btn btn-@(Opponent == "Genghis" ? "success" : "secondary")" onclick="@(() => SetOpponent("Genghis"))">Genghis</button>
                    <button type="button" class="btn btn-@(Opponent == "Boris" ? "success" : "secondary")" onclick="@(() => SetOpponent("Boris"))">Boris</button>
                    <button type="button" class="btn btn-@(Opponent == "Sima Yi" ? "success" : "secondary")" onclick="@(() => SetOpponent("Sima Yi"))">Sima Yi</button>
                </div>
            </div>
        </div>
    </div>
}

@code{
    private Timer _timer = null!;
    private string _clock = "";
    private int _seconds = 0;
    
    private Player? HumanPlayer { get; set; }
    private Player? ComputerPlayer { get; set; }
    
    private Game? Game { get; set; }
    private GameResult Result { get; set; } = GameResult.None;

    private string Message { get; set; } = "Game in progress";
    private string Opponent { get; set; } = "Tipsy";
    
    protected override void OnInitialized()
    {
        (Game, HumanPlayer, ComputerPlayer) = Service.HumanVersus(Opponent);
        ResetClock();
        CreateTimer();
        ComputerMove();
    }
    
    private void StartGame()
    {
        (Game, HumanPlayer, ComputerPlayer) = Service.HumanVersus(Opponent);
        Message = "Game in progress";
        Result = GameResult.None;
        
        ComputerMove();
        ResetClock();
        StateHasChanged();
    }

    private void PlayerMove(Square square)
    {
        if (Game!.State != State.Running) return;
        if (square.IsOccupied) return;
        if (Game.Turn != HumanPlayer) return;

        UpdateGame(HumanPlayer, square.Position);

        ComputerMove();
        StateHasChanged();
    }
    
    private void ComputerMove()
    {
        if (Game!.State != State.Running) return;
        if (Game.Turn != ComputerPlayer) return;
        
        var position = ComputerPlayer.SelectMove(Game.MoveCount, Game.Board);
        UpdateGame(ComputerPlayer, position);
    }

    private void UpdateGame(Player player, Position position)
    {
        Game!.Move(player, position);
        
        switch (Game!.State)
        {
            case State.Win:
                Result = player == HumanPlayer ? GameResult.PlayerWon : GameResult.ComputerWon;
                Message = $"{player.Name} won, saying '{player.Celebration}'";
                break;
            case State.Draw:
                Result = GameResult.Draw;
                Message = "Draw!";
                break;
        }
    }
    
    private void CreateTimer()
    {
        _timer = new Timer(
            _ =>
            {
                if (Game is null || Game.State != State.Running) return;

                ++_seconds;
                _clock = TimeSpan.FromSeconds(_seconds).ToString(@"mm\:ss");

                InvokeAsync(StateHasChanged);
            }, 
            new AutoResetEvent(false), TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private void ResetClock()
    {
        _seconds = 0;
        _clock = "00:00";
    }
    
    private void SetOpponent(string name)
    {
        Opponent = name;
        StartGame();
    }
}
